/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.roesel.oadataprocessor.openapi.api;

import at.roesel.oadataprocessor.openapi.model.Error;
import at.roesel.oadataprocessor.openapi.model.Publication;
import at.roesel.oadataprocessor.openapi.model.PublicationResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-29T11:37:29.687691600+01:00[Europe/Vienna]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Publication", description = "the Publication API")
public interface WsApi {

    default WsApiDelegate getDelegate() {
        return new WsApiDelegate() {};
    }

    /**
     * GET /ws/publication/{publication_id} : API to retrieve a single publication by identifier
     *
     * @param publicationId Can either be - an internal publication id, e.g. 0008122f-1a4c-48ab-adb8-1947adf3854a - a DOI, e.g. 10.1016/j.jsc.2023.102236  (required)
     * @return publication metadata (status code 200)
     *         or error detail in case of Bad request (status code 400)
     *         or error if no publication is found (status code 404)
     *         or error detail in case of server error (status code 500)
     */
    @Operation(
        operationId = "getPublication",
        summary = "API to retrieve a single publication by identifier",
        tags = { "Publication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "publication metadata", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Publication.class))
            }),
            @ApiResponse(responseCode = "400", description = "error detail in case of Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "error if no publication is found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "error detail in case of server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ws/publication/{publication_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Publication> getPublication(
        @Parameter(name = "publication_id", description = "Can either be - an internal publication id, e.g. 0008122f-1a4c-48ab-adb8-1947adf3854a - a DOI, e.g. 10.1016/j.jsc.2023.102236 ", required = true, in = ParameterIn.PATH) @PathVariable("publication_id") String publicationId
    ) {
        return getDelegate().getPublication(publicationId);
    }


    /**
     * GET /ws/publications : API to fetch publications by search criteria
     *
     * @param limit Number of records that will be returned in one request (optional, default to 200)
     * @param cursor Search cursor. Use the cursor to iterate through the publications (optional)
     * @param doi  (optional)
     * @param institution ROR-Id of requested institution, e.g. https://ror.org/03prydq77 (optional)
     * @param year year of publication (optional)
     * @param oacolor Open Access Color (optional)
     * @param include List of additional field names to include in the response - author  (optional)
     * @return publication metadata (status code 200)
     *         or error detail in case of Bad request (status code 400)
     *         or error detail in case of server error (status code 500)
     */
    @Operation(
        operationId = "listPublications",
        summary = "API to fetch publications by search criteria",
        tags = { "Publication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "publication metadata", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PublicationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "error detail in case of Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PublicationResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "error detail in case of server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PublicationResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ws/publications",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PublicationResponse> listPublications(
        @Max(2000) @Parameter(name = "limit", description = "Number of records that will be returned in one request", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "200") Integer limit,
        @Parameter(name = "cursor", description = "Search cursor. Use the cursor to iterate through the publications", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cursor", required = false) String cursor,
        @Parameter(name = "doi", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "doi", required = false) String doi,
        @Parameter(name = "institution", description = "ROR-Id of requested institution, e.g. https://ror.org/03prydq77", in = ParameterIn.QUERY) @Valid @RequestParam(value = "institution", required = false) String institution,
        @Parameter(name = "year", description = "year of publication", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "oacolor", description = "Open Access Color", in = ParameterIn.QUERY) @Valid @RequestParam(value = "oacolor", required = false) String oacolor,
        @Parameter(name = "include", description = "List of additional field names to include in the response - author ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        return getDelegate().listPublications(limit, cursor, doi, institution, year, oacolor, include);
    }

}
